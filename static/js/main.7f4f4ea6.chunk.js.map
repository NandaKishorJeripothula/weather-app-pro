{"version":3,"sources":["components/styles.ts","components/config.ts","components/utils.ts","components/DailyForecast/daily-forecast.tsx","components/hooks.ts","components/HouryForecast/hourly-forecast.tsx","components/Forecast/forecast.tsx","components/Map/map.tsx","components/Title/title.tsx","components/Layout/layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useWeatherAppStyles","makeStyles","content","padding","fxVCenter","display","alignItems","person","fontSize","fontWeight","lineHeight","color","background","backgroundColor","profileCard","marginBottom","borderRadius","blackClr","bgTheme","listingContainer","height","overflowY","newListItem","cursor","transition","avatarIcon","width","marginRight","position","squareRoundedAvatar32","newListItemTitle","ellipsisBy210","whiteSpace","overflow","textOverflow","maxWidth","minWidth","squareBadge","textAlign","mlAuto","marginLeft","regContainer","margin","getUrl","type","config","lat","lng","getFormattedTime","timeZone","dateTime","variant","dateObject","fromUnixTime","formatToTimeZone","TEMPERATURE_UNIT","getFormattedTemperature","temperature","DailyForecast","props","classes","loading","Box","className","clsx","Typography","Divider","py","CircularProgress","size","RenderDailyForecastData","data","error","length","Table","TableHead","TableRow","TableCell","align","TableBody","map","day","key","component","scope","dt","temp","min","max","src","weather","icon","alt","description","useFetch","url","init","useState","setData","setLoading","setError","prevInit","useRef","prevUrl","useEffect","current","fetch","then","response","ok","json","catch","err","console","finally","HourlyForecast","RenderHourlyForecastData","hour","feels_like","Forecast","setCity","city","name","prevCity","hourly","timezone","daily","Map","onPositionChange","style","center","zoom","onclick","event","latlng","log","TileLayer","attribution","maxZoom","Marker","ref","leafletElement","openPopup","Popup","autoPan","main","Title","title","Layout","setPosition","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","undefined","timeout","Grid","container","flexWrap","item","xs","paddingLeft","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7f4f4ea6.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const useWeatherAppStyles = makeStyles({\r\n  content: {\r\n    padding: \"10px\",\r\n  },\r\n\r\n  fxVCenter: {\r\n    display: \"flex !important\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  person: {\r\n    fontSize: \"16px\",\r\n    fontWeight: 600,\r\n    lineHeight: \"20px\",\r\n    color: \"rgba(0, 0, 0, 0.8)\",\r\n  },\r\n  background: {\r\n    backgroundColor: \"#ffffff\",\r\n  },\r\n  profileCard: {\r\n    marginBottom: \"20px\",\r\n    borderRadius: \"3px\",\r\n  },\r\n  blackClr: {\r\n    color: \"rgba(0, 0, 0, 1) !important\",\r\n  },\r\n  bgTheme: {\r\n    // backgroundColor: \"#eeeeee !important\",\r\n    backgroundColor: \"#747373 !important\",\r\n  },\r\n\r\n  listingContainer: {\r\n    // minHeight: \"174px\",\r\n    padding: \"10px 5px\",\r\n    // maxHeight: \"176px\",\r\n    height: \"32vh\",\r\n    overflowY: \"auto\",\r\n  },\r\n  newListItem: {\r\n    cursor: \"pointer\",\r\n    background: \"#ffffff\",\r\n    color: \"#4c4c4c\",\r\n    padding: \"5px 5px\",\r\n    borderRadius: \"2px\",\r\n    marginBottom: \"4px\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#eeeeee\",\r\n      transition: \"0.2s\",\r\n    },\r\n  },\r\n  avatarIcon: {\r\n    height: \"32px\",\r\n    width: \"32px\",\r\n    marginRight: \"10px\",\r\n    borderRadius: \"2px\",\r\n    position: \"relative\",\r\n  },\r\n  squareRoundedAvatar32: {\r\n    height: \"32px\",\r\n    width: \"32px\",\r\n    borderRadius: \"2px\",\r\n  },\r\n  newListItemTitle: {\r\n    fontSize: \"14px\",\r\n    lineHeight: \"20px\",\r\n    color: \"#000000\",\r\n  },\r\n  ellipsisBy210: {\r\n    whiteSpace: \"nowrap\",\r\n    overflow: \"hidden\",\r\n    textOverflow: \"ellipsis\",\r\n    maxWidth: \"205px\",\r\n    minWidth: \"205px\",\r\n  },\r\n  squareBadge: {\r\n    backgroundColor: \"#f0e2eb\",\r\n    fontSize: \"11px\",\r\n    fontWeight: 600,\r\n    color: \"#e63d72\",\r\n    borderRadius: \"2px\",\r\n    height: \"20px\",\r\n    width: \"20px\",\r\n    textAlign: \"center\",\r\n    lineHeight: \"18px\",\r\n  },\r\n  mlAuto: {\r\n    marginLeft: \"auto\",\r\n  },\r\n  regContainer: {\r\n    maxWidth: \"1140px !important\",\r\n    margin: \"0 auto\",\r\n  },\r\n});\r\n","export default {\r\n  // WEATHER_API_KEY: \"cd724dc3b53280eb593a4803f2b14dab\", nanda temp1\r\n  WEATHER_API_KEY: \"449de63838b85f03e45a2616932ed63c\",\r\n  TIMEZONE_API_KEY: \"UJ51XQSP5U1A\",\r\n  DAILY_FORECAST_DAYS_COUNT: 7,\r\n  HOURLY_FORECAST_HOURS_COUNT: 12,\r\n  // Unit Default: Kelvin, Metric:Celsius, Imperial: Fahrenheit.\r\n  UNIT: \"metric\", // to get data in Celsius,\r\n  EXCLUDE_FORECAST: \"\",\r\n};\r\n","import { formatToTimeZone } from \"date-fns-timezone\";\r\nimport fromUnixTime from \"date-fns/fromUnixTime\";\r\nimport config from \"./config\";\r\nimport { Position, TEMP_UNIT } from \"./interfaces\";\r\nexport const getUrl = (\r\n  type: \"timezone\" | \"forecast\" | \"current-forecast\",\r\n  position: Position\r\n): string => {\r\n  switch (type) {\r\n    case \"timezone\":\r\n      return `https://api.timezonedb.com/v2.1/get-time-zone?key=${config.TIMEZONE_API_KEY}&format=json&by=position&lat=${position.lat}&lng=${position.lng}`;\r\n    case \"forecast\":\r\n      return `https://api.openweathermap.org/data/2.5/onecall?lat=${position.lat}&lon=${position.lng}&units=${config.UNIT}&exclude=${config.EXCLUDE_FORECAST}&appid=${config.WEATHER_API_KEY}`;\r\n    case \"current-forecast\":\r\n      return `https://api.openweathermap.org/data/2.5/weather?lat=${position.lat}&lon=${position.lng}&units=${config.UNIT}&appid=${config.WEATHER_API_KEY}`;\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nexport const DATE_FORMAT_WITH_TIMEZONE = \"Do MMM, YYYY\";\r\nexport const TIME_FORMAT_WITH_TIMEZONE = \"HH:mm\";\r\nexport const DATE_TIME_FORMAT_WITH_TIMEZONE = \"DD/MM, HH:mm\";\r\n\r\nexport const getFormattedTime = (\r\n  timeZone: string,\r\n  dateTime: number,\r\n  variant: \"dateTime\" | \"date\" | \"time\" = \"dateTime\"\r\n) => {\r\n  const dateObject = fromUnixTime(dateTime);\r\n  switch (variant) {\r\n    case \"dateTime\":\r\n      return formatToTimeZone(dateObject, DATE_TIME_FORMAT_WITH_TIMEZONE, {\r\n        timeZone,\r\n      });\r\n    case \"date\":\r\n      return formatToTimeZone(dateObject, DATE_FORMAT_WITH_TIMEZONE, {\r\n        timeZone,\r\n      });\r\n    case \"time\":\r\n      return formatToTimeZone(dateObject, TIME_FORMAT_WITH_TIMEZONE, {\r\n        timeZone,\r\n      });\r\n  }\r\n};\r\n\r\nconst TEMPERATURE_UNIT = {\r\n  Fahrenheit: \"℉\",\r\n  Celsius: \"℃\",\r\n  Kelvin: \"K\",\r\n};\r\nexport const getFormattedTemperature = (temperature: number) => {\r\n  switch (config.UNIT as TEMP_UNIT) {\r\n    case \"metric\":\r\n      return `${temperature} ${TEMPERATURE_UNIT.Celsius}`;\r\n    case \"imperial\":\r\n      return `${temperature} ${TEMPERATURE_UNIT.Fahrenheit}`;\r\n    default:\r\n      return `${temperature} ${TEMPERATURE_UNIT.Kelvin}`;\r\n  }\r\n};\r\n","import Box from \"@material-ui/core/Box\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport clsx from \"clsx\";\r\nimport React from \"react\";\r\nimport { Daily } from \"../Forecast/interfaces\";\r\nimport { ForecastComponentBaseProps } from \"../interfaces\";\r\nimport { useWeatherAppStyles } from \"../styles\";\r\nimport { getFormattedTemperature, getFormattedTime } from \"../utils\";\r\n\r\ninterface DailyForecastProps extends ForecastComponentBaseProps {\r\n  data: Daily[];\r\n}\r\nexport const DailyForecast = (props: DailyForecastProps) => {\r\n  const classes = useWeatherAppStyles(props);\r\n  const { loading } = props;\r\n  return (\r\n    <Box>\r\n      <Box className={clsx(classes.background, classes.content)}>\r\n        <Typography className={clsx(classes.blackClr, classes.person)}>\r\n          Daily Forecast\r\n        </Typography>\r\n      </Box>\r\n      <Divider className={classes.bgTheme} />\r\n      <Box>\r\n        <Box\r\n          py={0.625}\r\n          className={clsx(\r\n            classes.background,\r\n            classes.listingContainer,\r\n            classes.profileCard\r\n          )}\r\n        >\r\n          {loading ? (\r\n            <CircularProgress size={25} />\r\n          ) : (\r\n            <>\r\n              <RenderDailyForecastData {...props} />\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst RenderDailyForecastData = (props: ForecastComponentBaseProps): any => {\r\n  const { data, error, timeZone } = props;\r\n  if (data && data.length) {\r\n    return (\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Date/Time</TableCell>\r\n            <TableCell>Min Temp</TableCell>\r\n            <TableCell>Max Temp</TableCell>\r\n            <TableCell align=\"right\"></TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.map((day: Daily, key: number) => (\r\n            <TableRow key={key}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {getFormattedTime(timeZone, day.dt)}\r\n              </TableCell>\r\n              <TableCell>{getFormattedTemperature(day.temp.min)}</TableCell>\r\n              <TableCell>{getFormattedTemperature(day.temp.max)}</TableCell>\r\n              <TableCell align=\"right\">\r\n                <Box>\r\n                  <img\r\n                    src={`http://openweathermap.org/img/wn/${day.weather[0].icon}.png`}\r\n                    alt={day.weather[0].description}\r\n                  />\r\n                </Box>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    );\r\n  }\r\n  if (error) {\r\n    return \"Error loading data, please try another location\";\r\n  }\r\n  return null;\r\n};\r\n","import { useEffect, useRef, useState } from \"react\";\r\n\r\n// This custom hook centralizes and streamlines handling of HTTP calls\r\nexport default function useFetch(url: string, init: any = {}) {\r\n  const [data, setData] = useState<any>(null);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<Error | any>(null);\r\n  const prevInit = useRef<any>();\r\n  const prevUrl = useRef<any>();\r\n\r\n  useEffect(() => {\r\n    // Only refetch if url or init params change.\r\n    if (prevUrl.current === url) return;\r\n    prevUrl.current = url;\r\n    prevInit.current = init;\r\n    fetch(url, init)\r\n      .then((response) => {\r\n        if (response.ok) return response.json();\r\n        setError(response);\r\n      })\r\n      .then((data) => setData(data))\r\n      .catch((err) => {\r\n        console.error(err);\r\n        setError(err);\r\n      })\r\n      .finally(() => setLoading(false));\r\n  }, [init, url]);\r\n\r\n  return { data, loading, error };\r\n}\r\n","import Box from \"@material-ui/core/Box\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport clsx from \"clsx\";\r\nimport React from \"react\";\r\nimport { Hourly } from \"../Forecast/interfaces\";\r\nimport { ForecastComponentBaseProps } from \"../interfaces\";\r\nimport { useWeatherAppStyles } from \"../styles\";\r\nimport { getFormattedTemperature, getFormattedTime } from \"../utils\";\r\ninterface HourlyForecastProps extends ForecastComponentBaseProps {\r\n  data: Hourly[];\r\n}\r\nexport const HourlyForecast = (props: HourlyForecastProps) => {\r\n  const classes = useWeatherAppStyles(props);\r\n  const { loading } = props;\r\n  return (\r\n    <Box>\r\n      <Box className={clsx(classes.background, classes.content)}>\r\n        <Typography className={clsx(classes.blackClr, classes.person)}>\r\n          Hourly Forecast\r\n        </Typography>\r\n      </Box>\r\n      <Divider className={classes.bgTheme} />\r\n      <Box>\r\n        <Box\r\n          py={0.625}\r\n          className={clsx(\r\n            classes.background,\r\n            classes.listingContainer,\r\n            classes.profileCard\r\n          )}\r\n        >\r\n          {loading ? (\r\n            <CircularProgress size={25} />\r\n          ) : (\r\n            <>\r\n              <RenderHourlyForecastData {...props} />\r\n            </>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst RenderHourlyForecastData = (props: HourlyForecastProps): any => {\r\n  const { data, error, timeZone } = props;\r\n  if (data && data.length) {\r\n    return (\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Date/Time</TableCell>\r\n            <TableCell>Actual Temp</TableCell>\r\n            <TableCell>Feel like Temp</TableCell>\r\n            <TableCell align=\"right\"></TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.map((hour: Hourly, key: number) => (\r\n            <TableRow key={key}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {getFormattedTime(timeZone, hour.dt)}\r\n              </TableCell>\r\n              <TableCell> {getFormattedTemperature(hour.temp)}</TableCell>\r\n              <TableCell> {getFormattedTemperature(hour.feels_like)}</TableCell>\r\n              <TableCell align=\"right\">\r\n                <Box>\r\n                  <img\r\n                    src={`http://openweathermap.org/img/wn/${hour.weather[0].icon}.png`}\r\n                    alt={hour.weather[0].description}\r\n                  />\r\n                </Box>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    );\r\n  }\r\n  if (error) {\r\n    return \"Error loading data, please try another location\";\r\n  }\r\n  return null;\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport DailyForecast from \"../DailyForecast\";\r\nimport useFetch from \"../hooks\";\r\nimport HourlyForecast from \"../HouryForecast\";\r\nimport { City, Position } from \"../interfaces\";\r\nimport { getUrl } from \"../utils\";\r\ninterface ForecastProps {\r\n  position: Position;\r\n  city?: City;\r\n  setCity?: any;\r\n}\r\nexport const Forecast = (props: ForecastProps) => {\r\n  const url = getUrl(\"forecast\", props.position);\r\n  const { loading, data, error } = useFetch(url);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props &&\r\n      props.setCity &&\r\n      props.city &&\r\n      props.city.name &&\r\n      data &&\r\n      data.city &&\r\n      data.city.name &&\r\n      props.city.name !== data.city.name\r\n    ) {\r\n      props.setCity((prevCity: City) => ({\r\n        ...prevCity,\r\n        ...((data.city || {}) as City),\r\n      }));\r\n    }\r\n  }, [data, props]);\r\n  return (\r\n    <>\r\n      <HourlyForecast\r\n        error={error}\r\n        data={data && data.hourly ? data.hourly : {}}\r\n        timeZone={data && data.timezone}\r\n        loading={loading}\r\n      />\r\n      <DailyForecast\r\n        error={error}\r\n        data={data && data.daily ? data.daily : {}}\r\n        timeZone={data && data.timezone}\r\n        loading={loading}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import Box from \"@material-ui/core/Box\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport clsx from \"clsx\";\r\nimport { LeafletMouseEvent } from \"leaflet\";\r\nimport React from \"react\";\r\nimport { Map as Leaflet, Marker, Popup, TileLayer } from \"react-leaflet\";\r\nimport useFetch from \"../hooks\";\r\nimport { City, Position } from \"../interfaces\";\r\nimport { useWeatherAppStyles } from \"../styles\";\r\nimport { getFormattedTemperature, getUrl } from \"../utils\";\r\ninterface MapProps {\r\n  position: Position;\r\n  onPositionChange: (data: Position) => void;\r\n  city: City;\r\n}\r\nexport const Map = (props: MapProps) => {\r\n  const { position, onPositionChange } = props;\r\n  const { data, loading, error } = useFetch(\r\n    getUrl(\"current-forecast\", position)\r\n  );\r\n\r\n  const classes = useWeatherAppStyles({});\r\n  // to apply default config to marker, use this method which controls using ref\r\n  const initMarker = (ref: any) => {\r\n    if (ref) {\r\n      ref.leafletElement.openPopup();\r\n    }\r\n  };\r\n\r\n  const handleMarkerPositionChange = (event: LeafletMouseEvent) => {\r\n    const { latlng } = event;\r\n    console.log(latlng);\r\n    onPositionChange(latlng as Position);\r\n  };\r\n\r\n  return (\r\n    <Leaflet\r\n      style={{\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n      }}\r\n      center={position}\r\n      zoom={13}\r\n      onclick={handleMarkerPositionChange}\r\n    >\r\n      <TileLayer\r\n        url=\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution='Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors'\r\n        maxZoom={18}\r\n      />\r\n      <Marker position={position} ref={initMarker}>\r\n        <Popup autoPan>\r\n          {loading ? (\r\n            <CircularProgress size={25} />\r\n          ) : error ? (\r\n            <Typography\r\n              className={clsx(classes.newListItemTitle, classes.ellipsisBy210)}\r\n            >\r\n              Error: Please try with another location\r\n            </Typography>\r\n          ) : (\r\n            <Box className={classes.fxVCenter}>\r\n              <Box>\r\n                <Typography\r\n                  className={clsx(\r\n                    classes.newListItemTitle,\r\n                    classes.ellipsisBy210\r\n                  )}\r\n                >\r\n                  {data && data.name ? `City: ${data.name}` : \"\"}\r\n                  <br />\r\n                  {`Weather : ${data.weather[0].main}`} <br />\r\n                  {`Temaprature : ${getFormattedTemperature(\r\n                    data.main.temp\r\n                  )}`}{\" \"}\r\n                  <br />\r\n                </Typography>\r\n              </Box>\r\n              <Box>\r\n                <img\r\n                  src={`http://openweathermap.org/img/wn/${data.weather[0].icon}.png`}\r\n                  alt={data.weather[0].description}\r\n                />\r\n              </Box>\r\n            </Box>\r\n          )}\r\n        </Popup>\r\n      </Marker>\r\n    </Leaflet>\r\n  );\r\n};\r\n","import Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport clsx from \"clsx\";\r\nimport React from \"react\";\r\nimport { useWeatherAppStyles } from \"../styles\";\r\ninterface TitleProps {\r\n  title: string;\r\n}\r\nexport const Title = (props: TitleProps) => {\r\n  const classes = useWeatherAppStyles(props);\r\n  return (\r\n    <Box\r\n      className={clsx(classes.background, classes.content, classes.profileCard)}\r\n    >\r\n      <Typography\r\n        className={clsx(classes.blackClr, classes.person)}\r\n        style={{ fontSize: \"18px\" }}\r\n      >\r\n        {props.title}\r\n      </Typography>\r\n    </Box>\r\n  );\r\n};\r\n","import Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Forecast } from \"../Forecast\";\r\nimport { City, Position } from \"../interfaces\";\r\nimport Map from \"../Map\";\r\nimport { useWeatherAppStyles } from \"../styles\";\r\nimport Title from \"../Title\";\r\n\r\nexport const Layout = () => {\r\n  const [position, setPosition] = useState<Position>({\r\n    lat: 17.4468019,\r\n    lng: 78.3102378,\r\n  });\r\n  const [city, setCity] = useState<City>({} as City);\r\n  const classes = useWeatherAppStyles({});\r\n\r\n  useEffect(() => {\r\n    // to detect user current location and reintialize marker on first load\r\n    navigator.geolocation.getCurrentPosition(\r\n      (event: any) => {\r\n        setPosition({\r\n          lat: event.coords.latitude,\r\n          lng: event.coords.longitude,\r\n        });\r\n      },\r\n      undefined, // on fail ignore as we have default\r\n      {\r\n        timeout: 3000,\r\n      } as any\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <Box className={classes.bgTheme} height=\"100vh\">\r\n      <Grid\r\n        container\r\n        style={{\r\n          flexWrap: \"nowrap\",\r\n          height: \"100%\",\r\n          width: \"100%\",\r\n          padding: \"25px\",\r\n        }}\r\n      >\r\n        <Grid item xs={4}>\r\n          <Title title=\"Weather Map Pro\" />\r\n          <Forecast position={position} city={city} setCity={setCity} />\r\n        </Grid>\r\n        <Grid item xs={8} style={{ paddingLeft: \"20px\" }}>\r\n          <Map position={position} onPositionChange={setPosition} city={city} />\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Layout } from \"./components/Layout\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Layout />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}